(function (parent, factory){
  var _instance

  var hasAMD = typeof define === 'function' && define.amd
    , hasCJS = typeof module === 'object' || typeof exports === 'object'
    , hasWindow = typeof window != 'undefined'
    , hasRequire = typeof require == 'function'

  var amdDeps = []
    , globalDeps = []
    , cjsDeps = []

  var args = [<%= _.map(external, function(d) { return '\''+d+'\''  }) %>]
    , deps = []
  
  //Only for node
  if(!hasWindow) {
    cjsDeps = args
    initFactory()
    registerCJS()
    return
  }

  //Check dependency availability whether is registered as amd,global or cjs
  for(var i = 0; i < args.length; i++) {
    var name = args[i]
    , globals = <%= JSON.stringify(config.globals) %>
    , _name = globals[name] || name
    , dep 

    if(dep = (find(parent, _name) || find(window, _name))) {
      globalDeps.push(_name)

      deps[i] = dep
      continue
    }

    if(!hasAMD && hasRequire) {
      cjsDeps.push(name)
      deps[i] = require(name)
      continue
    }

    if(!hasAMD) throw new Error('Module does not exists within any known module system ' + name)

    amdDeps.push(name)
  }
  
  initFactory()
  registerAMD()
  registerCJS()
  registerGlobal()

  function registerAMD() {
    if (!hasAMD) return

    if (!amdDeps.length) {
      define('<%- config.names.amd %>', function() { return _instance })
      return
    }

    //Load missing dependencies
    require(amdDeps, function() {
      var asyncDeps = arguments
        , current = 0

      //After all dependencies are loaded - register a module
      define('<%- config.names.amd %>', function() { 
        //Fill missing dependencies with right async instances
        //[dep,undefined,dep,undefined] -> [dep, arguments[0], dep, arguments[1]]
        for(var i = 0; i < args.length; i++) {
          if(typeof deps[i] == 'undefined') {
            deps[i] = asyncDeps[current]
            current++
          }
        }

        amdDeps = []

        initFactory()
        registerGlobal()
        registerCJS()

        return _instance
      })
    })
  }

  function registerGlobal() {
    if(!amdDeps.length && hasWindow) {
    <%= util.toGlobal(['parent'].concat(config.names.global.split('.')), '_instance') %>
    }
  }

  function registerCJS() { 
    if (!amdDeps.length && hasCJS)
      module.exports = _instance 
  }

  function find(parent, path) {
    var _d, _p, k;
    _p = path.match(/([\w|\-\_]+)/g)
    for(k = 0; k < _p.length; k++) { 
      if(k == 0) { _d = parent[_p[k]] }
      else { _d && (_d = _d[_p[k]]) }
    }
    return _d
  }

  function initFactory() { 

    isReady() && (_instance = factory.apply(null, deps))

    function isReady() {
      var ready = true
      for(var i = 0; i < args.length; i++) {
        if(!ready) break
        ready = typeof deps[i] != 'undefined'
      }
      return ready
    }
  }
  }(this, function (<%= _.map(external, util.escape).join(',') %>) {
  var closure = {}
  <% _.chain(external)
      .map(function(d) { return "closure['" + d + "'] = " + util.escape(d) })
      .each(function(name) {;
  %><%= name %>
  <%})%>
var __req = <%= util.getTemplate('default', ['closure']) %>
return __req('<%= config.returns %>')

}.bind({})))
